@typeparam TItem where TItem : class

<FluentCard Style="padding: 20px;">
    <h3>@PageTitle</h3>
    <p>@PageDescription</p>

    <EditForm Model="@ItemToValidate" OnValidSubmit="@HandleValidation" FormName="SingleItemValidatorForm">
        <DataAnnotationsValidator />

        @* To jest "dziura", w którą wstawimy pola z zewnątrz *@
        @FormFields(ItemToValidate)

        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Class="mt-3">Validate</FluentButton>

    </EditForm>

    @if (ValidationErrors?.Any() == true)
    {
        <div class="alert alert-danger mt-4">
            <h5>Validation Errors:</h5>
            <ul>
                @foreach (var error in ValidationErrors)
                {
                    <li>@error</li>
                }
            </ul>
        </div>
    }

    @if (IsValidationSuccess)
    {
        <div class="alert alert-success mt-4">
            Validation successful! No errors found.
        </div>
    }

</FluentCard>

@code{
    [Parameter] public string PageTitle { get; set; } = "Validation Page";
    [Parameter] public string PageDescription { get; set; } = "Enter data and validate";

    // Parametr, który przyjmuje definicję pól fomularza z zewnątrz
    [Parameter] public RenderFragment<TItem> FormFields { get; set; }

    // Parametr, który przyjmuje logikę walidacji z zewnątrz
    [Parameter] public Func<TItem, List<string>> ValidationLogic { get; set; }

    [Parameter] public TItem ItemToValidate { get; set; }

    // DODAJ TEN PARAMETR:
    // To jest "kanał zwrotny", który pozwala komponentowi powiadomić rodzica o zmianie.
    [Parameter] public EventCallback<TItem> ItemToValidateChanged { get; set; }

    private List<string>? ValidationErrors { get; set; }
    private bool IsValidationSuccess { get; set; }

    private void HandleValidation()
    {
        IsValidationSuccess = false;
        ValidationErrors = null;

        if (ValidationLogic != null)
        {
            ValidationErrors = ValidationLogic.Invoke(ItemToValidate);
            if (ValidationErrors.Count == 0)
            {
                IsValidationSuccess = true;
            }
        }

        // Informujemy Blazora jawnie: "Hej, stan się zmienił, przerysuj proszę interfejs!"
        StateHasChanged();
    }
}